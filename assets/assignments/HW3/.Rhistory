42/82
knitr::opts_chunk$set(echo = TRUE, comment = NA)
options(digits = 3)
library(lavaan)
library(semPlot)
# SES, IQ and Need Achievement data
SES_lower <- '
1
.30   1
.41 .16   1
.33 .57 .50   1'
# Sample size
N3 <- 306
SES_cor <- getCov(SES_lower,
names = c("SES",
"IQ",
"nAch",
"GPA"))
SES_model <- '
# regressions
IQ ~ SES
nAch ~ SES + IQ
GPA ~ SES + IQ + nAch '
SES_model_fit <- sem(SES_model,
sample.cov = SES_cor,
sample.nobs = N3)
summary(SES_model_fit,
standardized = TRUE,
fit.measures = TRUE,
ci = TRUE)
parTable(SES_model_fit)
lavInspect(SES_model_fit, "rsquare")
summary(SES_model_fit)
parTable(SES_model_fit)
lavInspect(SES_model_fit, "est")
summary(SES_model_fit , rsquare= TRUE)
semPaths(SES_model,
"par",
style = "ram",
layout = "spring")
semPaths(SES_model,
"par",
style = "ram",
layout = "tree")
semPaths(SES_model,
"par",
style = "lisrel",
layout = "tree")
semPaths(SES_model,
"par",
style = "ram",
layout = "spring")
semPaths(SES_model,
"par",
style = "ram",
layout = "circle")
semPaths(SES_model,
"eq",
style = "ram",
layout = "circle")
semPaths(SES_model,
"eq",
as.expression = "edges",
style = "ram",
layout = "circle")
semPaths(SES_model,
"eq",
ask = FALSE,
as.expression = "edges",
style = "ram",
layout = "circle")
semPaths(SES_model,
"eq",
style = "ram",
layout = "circle")
semPaths(SES_model_fit ,
"eq",
as.expression = "edges",
style = "ram",
layout = "circle")
semPaths(SES_model_fit ,
"eq",
style = "ram",
layout = "circle")
Loadings <- rbind(diag(1, 2, 2), diag(1, 2, 2), diag(1, 2, 2))
# Phi and Psi matrices:
LatVar <- diag(1, 2, 2)
# Beta matrix:
Beta <- matrix(0, 2, 2)
Beta[1, 2] <- 1
# Theta matrices:
ManVar <- diag(1, nrow(Loadings), nrow(Loadings))
# Gamma matrix:
Gamma <- diag(1, 2, 2)
# Tau matrices:
ManInts <- rep(1, 6)
# Alpha and Kappa matrices:
LatInts <- rep(1, 2)
# Combine model:
mod <- lisrelModel(LY = Loadings, PS = LatVar, BE = Beta, TE = ManVar, LX = Loadings,
PH = LatVar, GA = Gamma, TD = ManVar, TY = ManInts, TX = ManInts, AL = LatInts,
KA = LatInts)
# Plot path diagram:
semPaths(mod, as.expression = c("nodes", "edges"), sizeMan = 3, sizeInt = 1,
sizeLat = 4)
Loadings
Beta
LatVar
matrix(0, 3, 1)
c(c(1, 1, 1),
c(1, 1, 1),
c(1, 1, 1))
?matrix
matrix(c(0, 0, 0,
1, 0, 0,
1, 1, 0),
nrow = 3,
ncol = 3,
byrow = TRUE)
matrix(c(1, 1, 1),
nrow = 3,
ncol = 1)
?diag
Psi <- diag(1,
nrow = 3,
ncol = 3)
Psi
# Beta matrix:
Beta <- matrix(c(0, 0, 0,
1, 0, 0,
1, 1, 0),
nrow = 3,
ncol = 3,
byrow = TRUE)
# Gamma matrix:
Gamma <- matrix(c(1, 1, 1),
nrow = 3,
ncol = 1)
Phi <- matrix(1,
nrow = 1,
ncol = 1)
Psi <- diag(1,
nrow = 3,
ncol = 3)
mod <- lisrelModel(PS = Psi,
BE = Beta,
PH = Phi,
GA = Gamma)
Phi
mod <- lisrelModel(PS = Psi,
BE = Beta,
GA = Gamma)
SES_model_fit <- sem(SES_model,
sample.cov = SES_cor,
sample.nobs = N3,
representation = "LISREL")
summary(SES_model_fit , rsquare = TRUE)
lavInspect(SES_model_fit, "est")
lavInspect(SES_model_fit, "est", representation = "LISREL")
sem(SES_model,
sample.cov = SES_cor,
sample.nobs = N3,
representation = "LISREL")
SES_model_fit <- sem(SES_model,
sample.cov = SES_cor,
sample.nobs = N3,
representation = "LISREL")
summary(SES_model_fit , rsquare = TRUE)
Beta <- matrix(c(0, 0, 0,
1, 0, 0,
1, 1, 0),
nrow = 3,
ncol = 3,
byrow = TRUE)
# Gamma matrix:
Gamma <- matrix(c(1, 1, 1),
nrow = 3,
ncol = 1)
Phi <- matrix(1,
nrow = 1,
ncol = 1)
Psi <- diag(1,
nrow = 3,
ncol = 3)
mod <- lisrelModel(PS = Psi,
BE = Beta,
PH = Phi,
GA = Gamma)
rbind(diag(1, 2, 2), diag(1, 2, 2), diag(1, 2, 2))
diag(1, 1, 1)
# Beta matrix:
Beta <- matrix(c(0, 0, 0,
1, 0, 0,
1, 1, 0),
nrow = 3,
ncol = 3,
byrow = TRUE)
# Gamma matrix:
Gamma <- matrix(c(1, 1, 1),
nrow = 3,
ncol = 1)
Psi <- diag(1,
nrow = 3,
ncol = 3)
Phi <- diag(1, 1, 1)
Lambda_x <- diag(1, 1, 1)
Lambda_y <- diag(1, 3, 3)
mod <- lisrelModel(LY = Lambda_y
PS = Psi,
BE = Beta,
LX = Lambda_x
PH = Phi,
GA = Gamma)
mod <- lisrelModel(LY = Lambda_y,
PS = Psi,
BE = Beta,
LX = Lambda_x
PH = Phi,
GA = Gamma)
mod <- lisrelModel(LY = Lambda_y,
PS = Psi,
BE = Beta,
LX = Lambda_x,
PH = Phi,
GA = Gamma)
semPaths(mod,
as.expression = c("nodes", "edges"),
sizeMan = 3,
sizeInt = 1,
sizeLat = 4)
semPaths(SES_model_fit,
"par",
style = "ram",
layout = "spring")
semPaths(SES_model_fit ,
"eq",
style = "ram",
layout = "circle")
semPaths(mod,
as.expression = c( "edges"),
sizeMan = 3,
sizeInt = 1,
sizeLat = 4)
semPaths(mod,
as.expression = c("nodes"),
sizeMan = 3,
sizeInt = 1,
sizeLat = 4)
semPaths(mod,
as.expression = c("nodes", "edges"),
sizeMan = 3,
sizeInt = 1,
sizeLat = 4)
?semPaths
semPaths(mod,
as.expression = c("nodes", "edges"),
sizeMan = 4,
sizeInt = 1,
sizeLat = 0)
semPaths(mod,
as.expression = c("nodes", "edges"),
sizeMan = 4,
sizeInt = 2,
sizeLat = 2)
semPaths(mod,
as.expression = c("nodes", "edges"))
semPaths(mod,
as.expression = c("nodes", "edges"),
sizeMan = 3,
sizeInt = 1,
sizeLat = 2)
var_names <- c("SES", "IQ", "nAch", "GPA")
SES_cor <- getCov(SES_lower,
names = var_names)
semPaths(SES_model ,
"eq",
style = "ram",
layout = "circle")
semPaths(SES_model ,
"eq",
style = "ram")
semPaths(SES_model ,
"eq")
semPaths(SES_model ,
"eq",
layout = "circle")
# Social status, actual and perceived income data
income_lower <- '
1.0000
0.3670  1.0000
0.5103  0.4310  1.0000
0.3633  0.1840  0.2772  1.0000
0.1574  0.2819  0.2311  0.2921  1.0000'
# Sample size
N4 <- 432
income_cor <- getCov(income_lower,
names = c("subj_income",
"subj_prestige",
"subj_status",
"actual_income",
"actual_prestige"))
income_model <- '
# regressions
subj_income ~ actual_income + subj_prestige
subj_prestige ~ actual_prestige + subj_income
subj_status ~ subj_income + subj_prestige
# correlations
actual_income ~~ actual_prestige
subj_income ~~ subj_prestige
subj_status  ~~ subj_prestige
subj_status  ~~ subj_income'
income_model_fit <- sem(income_model,
sample.cov = income_cor,
sample.nobs = N4)
summary(income_model_fit,
rsquare = TRUE)
(modelEst <-lavInspect(income_model_fit, "est"))
(modelEst <- lavInspect(income_model_fit, "est"))
(Psi   <- modelEst$beta[1:3, 1:3])
(Phi   <- modelEst$beta[4:5, 4:5])
(Beta  <- modelEst$beta[1:3, 1:3])
(Gamma <- modelEst$beta[1:3, 4:5])
